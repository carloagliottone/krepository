{"version":3,"file":"ng-thermal-print.service.d.ts","sources":["ng-thermal-print.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { PrintBuilder } from './builders/PrintBuilder';\nimport { BehaviorSubject } from 'rxjs';\nimport { PrintDriver } from './drivers/PrintDriver';\nexport declare class PrintService extends PrintBuilder {\n    printLanguage: string;\n    driver: PrintDriver;\n    isConnected: BehaviorSubject<boolean>;\n    builder: PrintBuilder;\n    constructor();\n    /**\n     *\n     * @param driver UsbDriver | WebPrintDriver\n     * @param printLanguage ESC/POS | StarPRNT | WebPRNT\n     */\n    setDriver(driver: PrintDriver, printLanguage?: string): PrintService;\n    /**\n     * Initialize a new print queue\n     */\n    init(): PrintService;\n    /**\n     *\n     * @param cutType full|partial\n     */\n    cut(cutType?: string): PrintService;\n    /**\n     *\n     * @param lineCount How many lines to feed\n     */\n    feed(lineCount?: number): PrintService;\n    setInverse(value?: boolean): PrintService;\n    setBold(value?: boolean): PrintService;\n    setUnderline(value?: boolean): PrintService;\n    /**\n     *\n     * @param value left|center\\right\n     */\n    setJustification(value?: string): PrintService;\n    /**\n     *\n     * @param value normal|large\n     */\n    setSize(value?: string): PrintService;\n    /**\n     *\n     * @param text\n     */\n    writeLine(text?: string): PrintService;\n    /**\n     * write the current builder value to the driver and clear out the builder\n     */\n    flush(): void;\n}\n"]}